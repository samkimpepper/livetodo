// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"todo/ent/todoitem"
	"todo/ent/todolist"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TodoItem is the model entity for the TodoItem schema.
type TodoItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Done holds the value of the "done" field.
	Done bool `json:"done,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate time.Time `json:"due_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoItemQuery when eager-loading is set.
	Edges           TodoItemEdges `json:"edges"`
	todo_list_items *int
	selectValues    sql.SelectValues
}

// TodoItemEdges holds the relations/edges for other nodes in the graph.
type TodoItemEdges struct {
	// List holds the value of the list edge.
	List *TodoList `json:"list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ListOrErr returns the List value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoItemEdges) ListOrErr() (*TodoList, error) {
	if e.loadedTypes[0] {
		if e.List == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: todolist.Label}
		}
		return e.List, nil
	}
	return nil, &NotLoadedError{edge: "list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todoitem.FieldDone:
			values[i] = new(sql.NullBool)
		case todoitem.FieldID:
			values[i] = new(sql.NullInt64)
		case todoitem.FieldTitle:
			values[i] = new(sql.NullString)
		case todoitem.FieldDueDate, todoitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case todoitem.ForeignKeys[0]: // todo_list_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoItem fields.
func (ti *TodoItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todoitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case todoitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ti.Title = value.String
			}
		case todoitem.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				ti.Done = value.Bool
			}
		case todoitem.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				ti.DueDate = value.Time
			}
		case todoitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = value.Time
			}
		case todoitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field todo_list_items", value)
			} else if value.Valid {
				ti.todo_list_items = new(int)
				*ti.todo_list_items = int(value.Int64)
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoItem.
// This includes values selected through modifiers, order, etc.
func (ti *TodoItem) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// QueryList queries the "list" edge of the TodoItem entity.
func (ti *TodoItem) QueryList() *TodoListQuery {
	return NewTodoItemClient(ti.config).QueryList(ti)
}

// Update returns a builder for updating this TodoItem.
// Note that you need to call TodoItem.Unwrap() before calling this method if this TodoItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TodoItem) Update() *TodoItemUpdateOne {
	return NewTodoItemClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TodoItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TodoItem) Unwrap() *TodoItem {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoItem is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TodoItem) String() string {
	var builder strings.Builder
	builder.WriteString("TodoItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("title=")
	builder.WriteString(ti.Title)
	builder.WriteString(", ")
	builder.WriteString("done=")
	builder.WriteString(fmt.Sprintf("%v", ti.Done))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(ti.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ti.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TodoItems is a parsable slice of TodoItem.
type TodoItems []*TodoItem
