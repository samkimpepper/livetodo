// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"todo/ent/todolist"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TodoList is the model entity for the TodoList schema.
type TodoList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoListQuery when eager-loading is set.
	Edges        TodoListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TodoListEdges holds the relations/edges for other nodes in the graph.
type TodoListEdges struct {
	// Items holds the value of the items edge.
	Items []*TodoItem `json:"items,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e TodoListEdges) ItemsOrErr() ([]*TodoItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TodoListEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todolist.FieldID:
			values[i] = new(sql.NullInt64)
		case todolist.FieldTitle:
			values[i] = new(sql.NullString)
		case todolist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoList fields.
func (tl *TodoList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todolist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tl.ID = int(value.Int64)
		case todolist.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tl.Title = value.String
			}
		case todolist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoList.
// This includes values selected through modifiers, order, etc.
func (tl *TodoList) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// QueryItems queries the "items" edge of the TodoList entity.
func (tl *TodoList) QueryItems() *TodoItemQuery {
	return NewTodoListClient(tl.config).QueryItems(tl)
}

// QueryUsers queries the "users" edge of the TodoList entity.
func (tl *TodoList) QueryUsers() *UserQuery {
	return NewTodoListClient(tl.config).QueryUsers(tl)
}

// Update returns a builder for updating this TodoList.
// Note that you need to call TodoList.Unwrap() before calling this method if this TodoList
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TodoList) Update() *TodoListUpdateOne {
	return NewTodoListClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TodoList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TodoList) Unwrap() *TodoList {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoList is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TodoList) String() string {
	var builder strings.Builder
	builder.WriteString("TodoList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("title=")
	builder.WriteString(tl.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TodoLists is a parsable slice of TodoList.
type TodoLists []*TodoList
