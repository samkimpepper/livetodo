// Code generated by ent, DO NOT EDIT.

package todoitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the todoitem type in the database.
	Label = "todo_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDone holds the string denoting the done field in the database.
	FieldDone = "done"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeList holds the string denoting the list edge name in mutations.
	EdgeList = "list"
	// Table holds the table name of the todoitem in the database.
	Table = "todo_items"
	// ListTable is the table that holds the list relation/edge.
	ListTable = "todo_items"
	// ListInverseTable is the table name for the TodoList entity.
	// It exists in this package in order to avoid circular dependency with the "todolist" package.
	ListInverseTable = "todo_lists"
	// ListColumn is the table column denoting the list relation/edge.
	ListColumn = "todo_list_items"
)

// Columns holds all SQL columns for todoitem fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDone,
	FieldDueDate,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "todo_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"todo_list_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultDone holds the default value on creation for the "done" field.
	DefaultDone bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the TodoItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDone orders the results by the done field.
func ByDone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDone, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByListField orders the results by list field.
func ByListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newListStep(), sql.OrderByField(field, opts...))
	}
}
func newListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ListTable, ListColumn),
	)
}
