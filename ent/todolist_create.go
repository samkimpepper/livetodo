// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"todo/ent/todoitem"
	"todo/ent/todolist"
	"todo/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoListCreate is the builder for creating a TodoList entity.
type TodoListCreate struct {
	config
	mutation *TodoListMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (tlc *TodoListCreate) SetTitle(s string) *TodoListCreate {
	tlc.mutation.SetTitle(s)
	return tlc
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TodoListCreate) SetCreatedAt(t time.Time) *TodoListCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TodoListCreate) SetNillableCreatedAt(t *time.Time) *TodoListCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// AddItemIDs adds the "items" edge to the TodoItem entity by IDs.
func (tlc *TodoListCreate) AddItemIDs(ids ...int) *TodoListCreate {
	tlc.mutation.AddItemIDs(ids...)
	return tlc
}

// AddItems adds the "items" edges to the TodoItem entity.
func (tlc *TodoListCreate) AddItems(t ...*TodoItem) *TodoListCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tlc.AddItemIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tlc *TodoListCreate) AddUserIDs(ids ...int) *TodoListCreate {
	tlc.mutation.AddUserIDs(ids...)
	return tlc
}

// AddUsers adds the "users" edges to the User entity.
func (tlc *TodoListCreate) AddUsers(u ...*User) *TodoListCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tlc.AddUserIDs(ids...)
}

// Mutation returns the TodoListMutation object of the builder.
func (tlc *TodoListCreate) Mutation() *TodoListMutation {
	return tlc.mutation
}

// Save creates the TodoList in the database.
func (tlc *TodoListCreate) Save(ctx context.Context) (*TodoList, error) {
	tlc.defaults()
	return withHooks(ctx, tlc.sqlSave, tlc.mutation, tlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TodoListCreate) SaveX(ctx context.Context) *TodoList {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TodoListCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TodoListCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TodoListCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := todolist.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TodoListCreate) check() error {
	if _, ok := tlc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TodoList.title"`)}
	}
	if v, ok := tlc.mutation.Title(); ok {
		if err := todolist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TodoList.title": %w`, err)}
		}
	}
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TodoList.created_at"`)}
	}
	return nil
}

func (tlc *TodoListCreate) sqlSave(ctx context.Context) (*TodoList, error) {
	if err := tlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tlc.mutation.id = &_node.ID
	tlc.mutation.done = true
	return _node, nil
}

func (tlc *TodoListCreate) createSpec() (*TodoList, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoList{config: tlc.config}
		_spec = sqlgraph.NewCreateSpec(todolist.Table, sqlgraph.NewFieldSpec(todolist.FieldID, field.TypeInt))
	)
	if value, ok := tlc.mutation.Title(); ok {
		_spec.SetField(todolist.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.SetField(todolist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tlc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TodoListCreateBulk is the builder for creating many TodoList entities in bulk.
type TodoListCreateBulk struct {
	config
	err      error
	builders []*TodoListCreate
}

// Save creates the TodoList entities in the database.
func (tlcb *TodoListCreateBulk) Save(ctx context.Context) ([]*TodoList, error) {
	if tlcb.err != nil {
		return nil, tlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TodoList, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TodoListCreateBulk) SaveX(ctx context.Context) []*TodoList {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TodoListCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TodoListCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
