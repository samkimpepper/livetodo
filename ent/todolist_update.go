// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"todo/ent/predicate"
	"todo/ent/todoitem"
	"todo/ent/todolist"
	"todo/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoListUpdate is the builder for updating TodoList entities.
type TodoListUpdate struct {
	config
	hooks    []Hook
	mutation *TodoListMutation
}

// Where appends a list predicates to the TodoListUpdate builder.
func (tlu *TodoListUpdate) Where(ps ...predicate.TodoList) *TodoListUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetTitle sets the "title" field.
func (tlu *TodoListUpdate) SetTitle(s string) *TodoListUpdate {
	tlu.mutation.SetTitle(s)
	return tlu
}

// SetCreatedAt sets the "created_at" field.
func (tlu *TodoListUpdate) SetCreatedAt(t time.Time) *TodoListUpdate {
	tlu.mutation.SetCreatedAt(t)
	return tlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlu *TodoListUpdate) SetNillableCreatedAt(t *time.Time) *TodoListUpdate {
	if t != nil {
		tlu.SetCreatedAt(*t)
	}
	return tlu
}

// AddItemIDs adds the "items" edge to the TodoItem entity by IDs.
func (tlu *TodoListUpdate) AddItemIDs(ids ...int) *TodoListUpdate {
	tlu.mutation.AddItemIDs(ids...)
	return tlu
}

// AddItems adds the "items" edges to the TodoItem entity.
func (tlu *TodoListUpdate) AddItems(t ...*TodoItem) *TodoListUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tlu.AddItemIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tlu *TodoListUpdate) AddUserIDs(ids ...int) *TodoListUpdate {
	tlu.mutation.AddUserIDs(ids...)
	return tlu
}

// AddUsers adds the "users" edges to the User entity.
func (tlu *TodoListUpdate) AddUsers(u ...*User) *TodoListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tlu.AddUserIDs(ids...)
}

// Mutation returns the TodoListMutation object of the builder.
func (tlu *TodoListUpdate) Mutation() *TodoListMutation {
	return tlu.mutation
}

// ClearItems clears all "items" edges to the TodoItem entity.
func (tlu *TodoListUpdate) ClearItems() *TodoListUpdate {
	tlu.mutation.ClearItems()
	return tlu
}

// RemoveItemIDs removes the "items" edge to TodoItem entities by IDs.
func (tlu *TodoListUpdate) RemoveItemIDs(ids ...int) *TodoListUpdate {
	tlu.mutation.RemoveItemIDs(ids...)
	return tlu
}

// RemoveItems removes "items" edges to TodoItem entities.
func (tlu *TodoListUpdate) RemoveItems(t ...*TodoItem) *TodoListUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tlu.RemoveItemIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (tlu *TodoListUpdate) ClearUsers() *TodoListUpdate {
	tlu.mutation.ClearUsers()
	return tlu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tlu *TodoListUpdate) RemoveUserIDs(ids ...int) *TodoListUpdate {
	tlu.mutation.RemoveUserIDs(ids...)
	return tlu
}

// RemoveUsers removes "users" edges to User entities.
func (tlu *TodoListUpdate) RemoveUsers(u ...*User) *TodoListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tlu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TodoListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tlu.sqlSave, tlu.mutation, tlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TodoListUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TodoListUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TodoListUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlu *TodoListUpdate) check() error {
	if v, ok := tlu.mutation.Title(); ok {
		if err := todolist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TodoList.title": %w`, err)}
		}
	}
	return nil
}

func (tlu *TodoListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(todolist.Table, todolist.Columns, sqlgraph.NewFieldSpec(todolist.FieldID, field.TypeInt))
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.Title(); ok {
		_spec.SetField(todolist.FieldTitle, field.TypeString, value)
	}
	if value, ok := tlu.mutation.CreatedAt(); ok {
		_spec.SetField(todolist.FieldCreatedAt, field.TypeTime, value)
	}
	if tlu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !tlu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tlu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tlu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todolist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tlu.mutation.done = true
	return n, nil
}

// TodoListUpdateOne is the builder for updating a single TodoList entity.
type TodoListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoListMutation
}

// SetTitle sets the "title" field.
func (tluo *TodoListUpdateOne) SetTitle(s string) *TodoListUpdateOne {
	tluo.mutation.SetTitle(s)
	return tluo
}

// SetCreatedAt sets the "created_at" field.
func (tluo *TodoListUpdateOne) SetCreatedAt(t time.Time) *TodoListUpdateOne {
	tluo.mutation.SetCreatedAt(t)
	return tluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tluo *TodoListUpdateOne) SetNillableCreatedAt(t *time.Time) *TodoListUpdateOne {
	if t != nil {
		tluo.SetCreatedAt(*t)
	}
	return tluo
}

// AddItemIDs adds the "items" edge to the TodoItem entity by IDs.
func (tluo *TodoListUpdateOne) AddItemIDs(ids ...int) *TodoListUpdateOne {
	tluo.mutation.AddItemIDs(ids...)
	return tluo
}

// AddItems adds the "items" edges to the TodoItem entity.
func (tluo *TodoListUpdateOne) AddItems(t ...*TodoItem) *TodoListUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tluo.AddItemIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tluo *TodoListUpdateOne) AddUserIDs(ids ...int) *TodoListUpdateOne {
	tluo.mutation.AddUserIDs(ids...)
	return tluo
}

// AddUsers adds the "users" edges to the User entity.
func (tluo *TodoListUpdateOne) AddUsers(u ...*User) *TodoListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tluo.AddUserIDs(ids...)
}

// Mutation returns the TodoListMutation object of the builder.
func (tluo *TodoListUpdateOne) Mutation() *TodoListMutation {
	return tluo.mutation
}

// ClearItems clears all "items" edges to the TodoItem entity.
func (tluo *TodoListUpdateOne) ClearItems() *TodoListUpdateOne {
	tluo.mutation.ClearItems()
	return tluo
}

// RemoveItemIDs removes the "items" edge to TodoItem entities by IDs.
func (tluo *TodoListUpdateOne) RemoveItemIDs(ids ...int) *TodoListUpdateOne {
	tluo.mutation.RemoveItemIDs(ids...)
	return tluo
}

// RemoveItems removes "items" edges to TodoItem entities.
func (tluo *TodoListUpdateOne) RemoveItems(t ...*TodoItem) *TodoListUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tluo.RemoveItemIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (tluo *TodoListUpdateOne) ClearUsers() *TodoListUpdateOne {
	tluo.mutation.ClearUsers()
	return tluo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tluo *TodoListUpdateOne) RemoveUserIDs(ids ...int) *TodoListUpdateOne {
	tluo.mutation.RemoveUserIDs(ids...)
	return tluo
}

// RemoveUsers removes "users" edges to User entities.
func (tluo *TodoListUpdateOne) RemoveUsers(u ...*User) *TodoListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tluo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the TodoListUpdate builder.
func (tluo *TodoListUpdateOne) Where(ps ...predicate.TodoList) *TodoListUpdateOne {
	tluo.mutation.Where(ps...)
	return tluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TodoListUpdateOne) Select(field string, fields ...string) *TodoListUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TodoList entity.
func (tluo *TodoListUpdateOne) Save(ctx context.Context) (*TodoList, error) {
	return withHooks(ctx, tluo.sqlSave, tluo.mutation, tluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TodoListUpdateOne) SaveX(ctx context.Context) *TodoList {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TodoListUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TodoListUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tluo *TodoListUpdateOne) check() error {
	if v, ok := tluo.mutation.Title(); ok {
		if err := todolist.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TodoList.title": %w`, err)}
		}
	}
	return nil
}

func (tluo *TodoListUpdateOne) sqlSave(ctx context.Context) (_node *TodoList, err error) {
	if err := tluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todolist.Table, todolist.Columns, sqlgraph.NewFieldSpec(todolist.FieldID, field.TypeInt))
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TodoList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todolist.FieldID)
		for _, f := range fields {
			if !todolist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todolist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.Title(); ok {
		_spec.SetField(todolist.FieldTitle, field.TypeString, value)
	}
	if value, ok := tluo.mutation.CreatedAt(); ok {
		_spec.SetField(todolist.FieldCreatedAt, field.TypeTime, value)
	}
	if tluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !tluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   todolist.ItemsTable,
			Columns: []string{todolist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tluo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tluo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todolist.UsersTable,
			Columns: todolist.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TodoList{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todolist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tluo.mutation.done = true
	return _node, nil
}
