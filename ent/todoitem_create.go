// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"todo/ent/todoitem"
	"todo/ent/todolist"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoItemCreate is the builder for creating a TodoItem entity.
type TodoItemCreate struct {
	config
	mutation *TodoItemMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (tic *TodoItemCreate) SetTitle(s string) *TodoItemCreate {
	tic.mutation.SetTitle(s)
	return tic
}

// SetDone sets the "done" field.
func (tic *TodoItemCreate) SetDone(b bool) *TodoItemCreate {
	tic.mutation.SetDone(b)
	return tic
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableDone(b *bool) *TodoItemCreate {
	if b != nil {
		tic.SetDone(*b)
	}
	return tic
}

// SetDueDate sets the "due_date" field.
func (tic *TodoItemCreate) SetDueDate(t time.Time) *TodoItemCreate {
	tic.mutation.SetDueDate(t)
	return tic
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableDueDate(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetDueDate(*t)
	}
	return tic
}

// SetCreatedAt sets the "created_at" field.
func (tic *TodoItemCreate) SetCreatedAt(t time.Time) *TodoItemCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tic *TodoItemCreate) SetNillableCreatedAt(t *time.Time) *TodoItemCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetListID sets the "list" edge to the TodoList entity by ID.
func (tic *TodoItemCreate) SetListID(id int) *TodoItemCreate {
	tic.mutation.SetListID(id)
	return tic
}

// SetNillableListID sets the "list" edge to the TodoList entity by ID if the given value is not nil.
func (tic *TodoItemCreate) SetNillableListID(id *int) *TodoItemCreate {
	if id != nil {
		tic = tic.SetListID(*id)
	}
	return tic
}

// SetList sets the "list" edge to the TodoList entity.
func (tic *TodoItemCreate) SetList(t *TodoList) *TodoItemCreate {
	return tic.SetListID(t.ID)
}

// Mutation returns the TodoItemMutation object of the builder.
func (tic *TodoItemCreate) Mutation() *TodoItemMutation {
	return tic.mutation
}

// Save creates the TodoItem in the database.
func (tic *TodoItemCreate) Save(ctx context.Context) (*TodoItem, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TodoItemCreate) SaveX(ctx context.Context) *TodoItem {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TodoItemCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TodoItemCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TodoItemCreate) defaults() {
	if _, ok := tic.mutation.Done(); !ok {
		v := todoitem.DefaultDone
		tic.mutation.SetDone(v)
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := todoitem.DefaultCreatedAt
		tic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TodoItemCreate) check() error {
	if _, ok := tic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TodoItem.title"`)}
	}
	if v, ok := tic.mutation.Title(); ok {
		if err := todoitem.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "TodoItem.title": %w`, err)}
		}
	}
	if _, ok := tic.mutation.Done(); !ok {
		return &ValidationError{Name: "done", err: errors.New(`ent: missing required field "TodoItem.done"`)}
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TodoItem.created_at"`)}
	}
	return nil
}

func (tic *TodoItemCreate) sqlSave(ctx context.Context) (*TodoItem, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TodoItemCreate) createSpec() (*TodoItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoItem{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(todoitem.Table, sqlgraph.NewFieldSpec(todoitem.FieldID, field.TypeInt))
	)
	if value, ok := tic.mutation.Title(); ok {
		_spec.SetField(todoitem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tic.mutation.Done(); ok {
		_spec.SetField(todoitem.FieldDone, field.TypeBool, value)
		_node.Done = value
	}
	if value, ok := tic.mutation.DueDate(); ok {
		_spec.SetField(todoitem.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.SetField(todoitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := tic.mutation.ListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todoitem.ListTable,
			Columns: []string{todoitem.ListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todolist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.todo_list_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TodoItemCreateBulk is the builder for creating many TodoItem entities in bulk.
type TodoItemCreateBulk struct {
	config
	err      error
	builders []*TodoItemCreate
}

// Save creates the TodoItem entities in the database.
func (ticb *TodoItemCreateBulk) Save(ctx context.Context) ([]*TodoItem, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TodoItem, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TodoItemCreateBulk) SaveX(ctx context.Context) []*TodoItem {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TodoItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TodoItemCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
